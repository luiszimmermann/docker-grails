language: bash
sudo: required
services:
  - docker

addons:
  apt:
    packages:
      - docker-ce
      - python

env:
  - GRAILS_VERSION=3.3.9    OS=stretch
  - GRAILS_VERSION=3.3.9    OS=stretch-slim
  - GRAILS_VERSION=3.3.9    OS=alpine
  - GRAILS_VERSION=3.3.9    OS=alpine   ENV=dev
  - GRAILS_VERSION=3.3.8    OS=stretch
  - GRAILS_VERSION=3.3.8    OS=stretch-slim
  - GRAILS_VERSION=3.3.8    OS=alpine
  - GRAILS_VERSION=3.3.8    OS=alpine   ENV=dev
  - GRAILS_VERSION=2.5.5    OS=stretch
  - GRAILS_VERSION=2.5.5    OS=stretch-slim
  - GRAILS_VERSION=2.5.5    OS=alpine
  - GRAILS_VERSION=2.5.5    OS=alpine   ENV=dev

install:
  - pip install --user awscli
  - export PATH=$PATH:$HOME/.local/bin # put aws in the path
  - docker pull openjdk:8-jdk

before_script:
  - docker --version
  - |
    if [ -z $ENV ]; then
      export IMAGE_TAG=$GRAILS_VERSION-$OS
      docker build -t grails:$GRAILS_VERSION-$OS --build-arg GRAILS_VERSION=$GRAILS_VERSION ./$OS
    else
    export IMAGE_TAG=$GRAILS_VERSION-$OS-$ENV
      docker build -f ./$OS/Dockerfile.dev -t grails:$GRAILS_VERSION-$OS-$ENV --build-arg GRAILS_VERSION=$GRAILS_VERSION ./$OS
    fi

script:
  - docker run -it --rm --name grails-$IMAGE_TAG grails:$IMAGE_TAG grails --version | grep -q $GRAILS_VERSION


after_script:
  - docker images

after_success:
  - eval $(aws ecr get-login --no-include-email --region sa-east-1) #needs AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY envvars
  - docker tag grails:$IMAGE_TAG $dockerId/grails:$IMAGE_TAG
  - docker push $dockerId/grails:$IMAGE_TAG
